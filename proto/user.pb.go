// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0-devel
// 	protoc        v3.15.6
// source: user.proto

// this will be package of the generated code

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Message structure
type UserRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Field number 1-15 use 1 byte, while field 16th - 2047th use 2 bytes
	// So, the first 15 fields should be reserved for fields that are used oftenly
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *UserRequest) Reset() {
	*x = UserRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserRequest) ProtoMessage() {}

func (x *UserRequest) ProtoReflect() protoreflect.Message {
	mi := &file_user_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserRequest.ProtoReflect.Descriptor instead.
func (*UserRequest) Descriptor() ([]byte, []int) {
	return file_user_proto_rawDescGZIP(), []int{0}
}

func (x *UserRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type User struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ApplicantId       string `protobuf:"bytes,1,opt,name=applicantId,proto3" json:"applicantId,omitempty"`
	CompCode          string `protobuf:"bytes,2,opt,name=compCode,proto3" json:"compCode,omitempty"`
	AppDate           string `protobuf:"bytes,3,opt,name=appDate,proto3" json:"appDate,omitempty"`
	ThName            string `protobuf:"bytes,4,opt,name=thName,proto3" json:"thName,omitempty"`
	ThSurname         string `protobuf:"bytes,5,opt,name=thSurname,proto3" json:"thSurname,omitempty"`
	ThNickname        string `protobuf:"bytes,6,opt,name=thNickname,proto3" json:"thNickname,omitempty"`
	PostionId         string `protobuf:"bytes,7,opt,name=postionId,proto3" json:"postionId,omitempty"`
	PostionId2        string `protobuf:"bytes,8,opt,name=postionId2,proto3" json:"postionId2,omitempty"`
	PositionLevel     string `protobuf:"bytes,9,opt,name=positionLevel,proto3" json:"positionLevel,omitempty"`
	CitizenId         string `protobuf:"bytes,10,opt,name=citizenId,proto3" json:"citizenId,omitempty"`
	IdIssure          string `protobuf:"bytes,11,opt,name=idIssure,proto3" json:"idIssure,omitempty"`
	IdExp             string `protobuf:"bytes,12,opt,name=idExp,proto3" json:"idExp,omitempty"`
	Race              string `protobuf:"bytes,13,opt,name=race,proto3" json:"race,omitempty"`
	Nationality       string `protobuf:"bytes,14,opt,name=nationality,proto3" json:"nationality,omitempty"`
	Religion          string `protobuf:"bytes,15,opt,name=religion,proto3" json:"religion,omitempty"`
	PreId             string `protobuf:"bytes,16,opt,name=preId,proto3" json:"preId,omitempty"`
	EngName           string `protobuf:"bytes,17,opt,name=engName,proto3" json:"engName,omitempty"`
	EngSurname        string `protobuf:"bytes,18,opt,name=engSurname,proto3" json:"engSurname,omitempty"`
	Birthday          string `protobuf:"bytes,19,opt,name=birthday,proto3" json:"birthday,omitempty"`
	Birthplace        string `protobuf:"bytes,20,opt,name=birthplace,proto3" json:"birthplace,omitempty"`
	TimeBirth         string `protobuf:"bytes,21,opt,name=timeBirth,proto3" json:"timeBirth,omitempty"`
	Weight            string `protobuf:"bytes,22,opt,name=weight,proto3" json:"weight,omitempty"`
	Tall              string `protobuf:"bytes,23,opt,name=tall,proto3" json:"tall,omitempty"`
	HopeSalary        string `protobuf:"bytes,24,opt,name=hopeSalary,proto3" json:"hopeSalary,omitempty"`
	HomeBirth1        string `protobuf:"bytes,25,opt,name=homeBirth1,proto3" json:"homeBirth1,omitempty"`
	HomeBirth         string `protobuf:"bytes,26,opt,name=homeBirth,proto3" json:"homeBirth,omitempty"`
	TambolBirth       string `protobuf:"bytes,27,opt,name=tambolBirth,proto3" json:"tambolBirth,omitempty"`
	AmphurBirth       string `protobuf:"bytes,28,opt,name=amphurBirth,proto3" json:"amphurBirth,omitempty"`
	ProvinceBirth     string `protobuf:"bytes,29,opt,name=provinceBirth,proto3" json:"provinceBirth,omitempty"`
	HomeTel           string `protobuf:"bytes,30,opt,name=homeTel,proto3" json:"homeTel,omitempty"`
	HomeCur1          string `protobuf:"bytes,31,opt,name=homeCur1,proto3" json:"homeCur1,omitempty"`
	HomeCur           string `protobuf:"bytes,32,opt,name=homeCur,proto3" json:"homeCur,omitempty"`
	TambolCur         string `protobuf:"bytes,33,opt,name=tambolCur,proto3" json:"tambolCur,omitempty"`
	AmphurCur         string `protobuf:"bytes,34,opt,name=amphurCur,proto3" json:"amphurCur,omitempty"`
	ProvinceCur       string `protobuf:"bytes,35,opt,name=provinceCur,proto3" json:"provinceCur,omitempty"`
	Mobile            string `protobuf:"bytes,36,opt,name=mobile,proto3" json:"mobile,omitempty"`
	Email             string `protobuf:"bytes,37,opt,name=email,proto3" json:"email,omitempty"`
	Im                string `protobuf:"bytes,38,opt,name=im,proto3" json:"im,omitempty"`
	Proxy             string `protobuf:"bytes,39,opt,name=proxy,proto3" json:"proxy,omitempty"`
	Blood             string `protobuf:"bytes,40,opt,name=blood,proto3" json:"blood,omitempty"`
	InterviewStatus   int32  `protobuf:"varint,41,opt,name=interviewStatus,proto3" json:"interviewStatus,omitempty"`
	GettingId         int32  `protobuf:"varint,42,opt,name=gettingId,proto3" json:"gettingId,omitempty"`
	ContractStatus    int32  `protobuf:"varint,43,opt,name=contractStatus,proto3" json:"contractStatus,omitempty"`
	Cancel            string `protobuf:"bytes,44,opt,name=cancel,proto3" json:"cancel,omitempty"`
	DeptId            string `protobuf:"bytes,45,opt,name=deptId,proto3" json:"deptId,omitempty"`
	SectId            string `protobuf:"bytes,46,opt,name=sectId,proto3" json:"sectId,omitempty"`
	BranchId          string `protobuf:"bytes,47,opt,name=branchId,proto3" json:"branchId,omitempty"`
	ComId             string `protobuf:"bytes,48,opt,name=comId,proto3" json:"comId,omitempty"`
	DepId             string `protobuf:"bytes,49,opt,name=depId,proto3" json:"depId,omitempty"`
	SectionId         string `protobuf:"bytes,50,opt,name=sectionId,proto3" json:"sectionId,omitempty"`
	SideId            string `protobuf:"bytes,51,opt,name=sideId,proto3" json:"sideId,omitempty"`
	DivisionId        string `protobuf:"bytes,52,opt,name=divisionId,proto3" json:"divisionId,omitempty"`
	StatusWork        string `protobuf:"bytes,53,opt,name=statusWork,proto3" json:"statusWork,omitempty"`
	ProPass           string `protobuf:"bytes,54,opt,name=proPass,proto3" json:"proPass,omitempty"`
	SatStop           int32  `protobuf:"varint,55,opt,name=satStop,proto3" json:"satStop,omitempty"`
	DayStop           int32  `protobuf:"varint,56,opt,name=dayStop,proto3" json:"dayStop,omitempty"`
	EmpPayGroup       string `protobuf:"bytes,57,opt,name=empPayGroup,proto3" json:"empPayGroup,omitempty"`
	EmphasizeTime     int32  `protobuf:"varint,58,opt,name=emphasizeTime,proto3" json:"emphasizeTime,omitempty"`
	TimeScan          int32  `protobuf:"varint,59,opt,name=timeScan,proto3" json:"timeScan,omitempty"`
	ContractId        string `protobuf:"bytes,60,opt,name=contractId,proto3" json:"contractId,omitempty"`
	SatPrice          int32  `protobuf:"varint,61,opt,name=satPrice,proto3" json:"satPrice,omitempty"`
	MoveDate          string `protobuf:"bytes,62,opt,name=moveDate,proto3" json:"moveDate,omitempty"`
	BossId            string `protobuf:"bytes,63,opt,name=bossId,proto3" json:"bossId,omitempty"`
	EmpType           int32  `protobuf:"varint,64,opt,name=empType,proto3" json:"empType,omitempty"`
	ConfPayType       string `protobuf:"bytes,65,opt,name=confPayType,proto3" json:"confPayType,omitempty"`
	TypeShift         string `protobuf:"bytes,66,opt,name=typeShift,proto3" json:"typeShift,omitempty"`
	PostStatus        string `protobuf:"bytes,67,opt,name=postStatus,proto3" json:"postStatus,omitempty"`
	RcApplyDocumentNo string `protobuf:"bytes,68,opt,name=rcApplyDocumentNo,proto3" json:"rcApplyDocumentNo,omitempty"`
	RcApplicantId     string `protobuf:"bytes,69,opt,name=rcApplicantId,proto3" json:"rcApplicantId,omitempty"`
	StatusCertificate int32  `protobuf:"varint,70,opt,name=statusCertificate,proto3" json:"statusCertificate,omitempty"`
	ContactList       int32  `protobuf:"varint,71,opt,name=contactList,proto3" json:"contactList,omitempty"`
	ImageProfile      string `protobuf:"bytes,72,opt,name=imageProfile,proto3" json:"imageProfile,omitempty"`
}

func (x *User) Reset() {
	*x = User{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *User) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*User) ProtoMessage() {}

func (x *User) ProtoReflect() protoreflect.Message {
	mi := &file_user_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use User.ProtoReflect.Descriptor instead.
func (*User) Descriptor() ([]byte, []int) {
	return file_user_proto_rawDescGZIP(), []int{1}
}

func (x *User) GetApplicantId() string {
	if x != nil {
		return x.ApplicantId
	}
	return ""
}

func (x *User) GetCompCode() string {
	if x != nil {
		return x.CompCode
	}
	return ""
}

func (x *User) GetAppDate() string {
	if x != nil {
		return x.AppDate
	}
	return ""
}

func (x *User) GetThName() string {
	if x != nil {
		return x.ThName
	}
	return ""
}

func (x *User) GetThSurname() string {
	if x != nil {
		return x.ThSurname
	}
	return ""
}

func (x *User) GetThNickname() string {
	if x != nil {
		return x.ThNickname
	}
	return ""
}

func (x *User) GetPostionId() string {
	if x != nil {
		return x.PostionId
	}
	return ""
}

func (x *User) GetPostionId2() string {
	if x != nil {
		return x.PostionId2
	}
	return ""
}

func (x *User) GetPositionLevel() string {
	if x != nil {
		return x.PositionLevel
	}
	return ""
}

func (x *User) GetCitizenId() string {
	if x != nil {
		return x.CitizenId
	}
	return ""
}

func (x *User) GetIdIssure() string {
	if x != nil {
		return x.IdIssure
	}
	return ""
}

func (x *User) GetIdExp() string {
	if x != nil {
		return x.IdExp
	}
	return ""
}

func (x *User) GetRace() string {
	if x != nil {
		return x.Race
	}
	return ""
}

func (x *User) GetNationality() string {
	if x != nil {
		return x.Nationality
	}
	return ""
}

func (x *User) GetReligion() string {
	if x != nil {
		return x.Religion
	}
	return ""
}

func (x *User) GetPreId() string {
	if x != nil {
		return x.PreId
	}
	return ""
}

func (x *User) GetEngName() string {
	if x != nil {
		return x.EngName
	}
	return ""
}

func (x *User) GetEngSurname() string {
	if x != nil {
		return x.EngSurname
	}
	return ""
}

func (x *User) GetBirthday() string {
	if x != nil {
		return x.Birthday
	}
	return ""
}

func (x *User) GetBirthplace() string {
	if x != nil {
		return x.Birthplace
	}
	return ""
}

func (x *User) GetTimeBirth() string {
	if x != nil {
		return x.TimeBirth
	}
	return ""
}

func (x *User) GetWeight() string {
	if x != nil {
		return x.Weight
	}
	return ""
}

func (x *User) GetTall() string {
	if x != nil {
		return x.Tall
	}
	return ""
}

func (x *User) GetHopeSalary() string {
	if x != nil {
		return x.HopeSalary
	}
	return ""
}

func (x *User) GetHomeBirth1() string {
	if x != nil {
		return x.HomeBirth1
	}
	return ""
}

func (x *User) GetHomeBirth() string {
	if x != nil {
		return x.HomeBirth
	}
	return ""
}

func (x *User) GetTambolBirth() string {
	if x != nil {
		return x.TambolBirth
	}
	return ""
}

func (x *User) GetAmphurBirth() string {
	if x != nil {
		return x.AmphurBirth
	}
	return ""
}

func (x *User) GetProvinceBirth() string {
	if x != nil {
		return x.ProvinceBirth
	}
	return ""
}

func (x *User) GetHomeTel() string {
	if x != nil {
		return x.HomeTel
	}
	return ""
}

func (x *User) GetHomeCur1() string {
	if x != nil {
		return x.HomeCur1
	}
	return ""
}

func (x *User) GetHomeCur() string {
	if x != nil {
		return x.HomeCur
	}
	return ""
}

func (x *User) GetTambolCur() string {
	if x != nil {
		return x.TambolCur
	}
	return ""
}

func (x *User) GetAmphurCur() string {
	if x != nil {
		return x.AmphurCur
	}
	return ""
}

func (x *User) GetProvinceCur() string {
	if x != nil {
		return x.ProvinceCur
	}
	return ""
}

func (x *User) GetMobile() string {
	if x != nil {
		return x.Mobile
	}
	return ""
}

func (x *User) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *User) GetIm() string {
	if x != nil {
		return x.Im
	}
	return ""
}

func (x *User) GetProxy() string {
	if x != nil {
		return x.Proxy
	}
	return ""
}

func (x *User) GetBlood() string {
	if x != nil {
		return x.Blood
	}
	return ""
}

func (x *User) GetInterviewStatus() int32 {
	if x != nil {
		return x.InterviewStatus
	}
	return 0
}

func (x *User) GetGettingId() int32 {
	if x != nil {
		return x.GettingId
	}
	return 0
}

func (x *User) GetContractStatus() int32 {
	if x != nil {
		return x.ContractStatus
	}
	return 0
}

func (x *User) GetCancel() string {
	if x != nil {
		return x.Cancel
	}
	return ""
}

func (x *User) GetDeptId() string {
	if x != nil {
		return x.DeptId
	}
	return ""
}

func (x *User) GetSectId() string {
	if x != nil {
		return x.SectId
	}
	return ""
}

func (x *User) GetBranchId() string {
	if x != nil {
		return x.BranchId
	}
	return ""
}

func (x *User) GetComId() string {
	if x != nil {
		return x.ComId
	}
	return ""
}

func (x *User) GetDepId() string {
	if x != nil {
		return x.DepId
	}
	return ""
}

func (x *User) GetSectionId() string {
	if x != nil {
		return x.SectionId
	}
	return ""
}

func (x *User) GetSideId() string {
	if x != nil {
		return x.SideId
	}
	return ""
}

func (x *User) GetDivisionId() string {
	if x != nil {
		return x.DivisionId
	}
	return ""
}

func (x *User) GetStatusWork() string {
	if x != nil {
		return x.StatusWork
	}
	return ""
}

func (x *User) GetProPass() string {
	if x != nil {
		return x.ProPass
	}
	return ""
}

func (x *User) GetSatStop() int32 {
	if x != nil {
		return x.SatStop
	}
	return 0
}

func (x *User) GetDayStop() int32 {
	if x != nil {
		return x.DayStop
	}
	return 0
}

func (x *User) GetEmpPayGroup() string {
	if x != nil {
		return x.EmpPayGroup
	}
	return ""
}

func (x *User) GetEmphasizeTime() int32 {
	if x != nil {
		return x.EmphasizeTime
	}
	return 0
}

func (x *User) GetTimeScan() int32 {
	if x != nil {
		return x.TimeScan
	}
	return 0
}

func (x *User) GetContractId() string {
	if x != nil {
		return x.ContractId
	}
	return ""
}

func (x *User) GetSatPrice() int32 {
	if x != nil {
		return x.SatPrice
	}
	return 0
}

func (x *User) GetMoveDate() string {
	if x != nil {
		return x.MoveDate
	}
	return ""
}

func (x *User) GetBossId() string {
	if x != nil {
		return x.BossId
	}
	return ""
}

func (x *User) GetEmpType() int32 {
	if x != nil {
		return x.EmpType
	}
	return 0
}

func (x *User) GetConfPayType() string {
	if x != nil {
		return x.ConfPayType
	}
	return ""
}

func (x *User) GetTypeShift() string {
	if x != nil {
		return x.TypeShift
	}
	return ""
}

func (x *User) GetPostStatus() string {
	if x != nil {
		return x.PostStatus
	}
	return ""
}

func (x *User) GetRcApplyDocumentNo() string {
	if x != nil {
		return x.RcApplyDocumentNo
	}
	return ""
}

func (x *User) GetRcApplicantId() string {
	if x != nil {
		return x.RcApplicantId
	}
	return ""
}

func (x *User) GetStatusCertificate() int32 {
	if x != nil {
		return x.StatusCertificate
	}
	return 0
}

func (x *User) GetContactList() int32 {
	if x != nil {
		return x.ContactList
	}
	return 0
}

func (x *User) GetImageProfile() string {
	if x != nil {
		return x.ImageProfile
	}
	return ""
}

var File_user_proto protoreflect.FileDescriptor

var file_user_proto_rawDesc = []byte{
	0x0a, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x05, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x22, 0x1d, 0x0a, 0x0b, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x69, 0x64, 0x22, 0xca, 0x10, 0x0a, 0x04, 0x55, 0x73, 0x65, 0x72, 0x12, 0x20, 0x0a, 0x0b, 0x61,
	0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1a, 0x0a,
	0x08, 0x63, 0x6f, 0x6d, 0x70, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x63, 0x6f, 0x6d, 0x70, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x70, 0x70,
	0x44, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x70, 0x70, 0x44,
	0x61, 0x74, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x68, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x68, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x74,
	0x68, 0x53, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x74, 0x68, 0x53, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x68, 0x4e,
	0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x74,
	0x68, 0x4e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x6f, 0x73,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x6f,
	0x73, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x6f, 0x73, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x64, 0x32, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x6f, 0x73,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x32, 0x12, 0x24, 0x0a, 0x0d, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x1c, 0x0a,
	0x09, 0x63, 0x69, 0x74, 0x69, 0x7a, 0x65, 0x6e, 0x49, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x63, 0x69, 0x74, 0x69, 0x7a, 0x65, 0x6e, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x69,
	0x64, 0x49, 0x73, 0x73, 0x75, 0x72, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69,
	0x64, 0x49, 0x73, 0x73, 0x75, 0x72, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x64, 0x45, 0x78, 0x70,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x69, 0x64, 0x45, 0x78, 0x70, 0x12, 0x12, 0x0a,
	0x04, 0x72, 0x61, 0x63, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x72, 0x61, 0x63,
	0x65, 0x12, 0x20, 0x0a, 0x0b, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x69, 0x74, 0x79,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c,
	0x69, 0x74, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x6c, 0x69, 0x67, 0x69, 0x6f, 0x6e, 0x18,
	0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x6c, 0x69, 0x67, 0x69, 0x6f, 0x6e, 0x12,
	0x14, 0x0a, 0x05, 0x70, 0x72, 0x65, 0x49, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x70, 0x72, 0x65, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x67, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x6e, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x1e, 0x0a, 0x0a, 0x65, 0x6e, 0x67, 0x53, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x12, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x65, 0x6e, 0x67, 0x53, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x1a, 0x0a, 0x08, 0x62, 0x69, 0x72, 0x74, 0x68, 0x64, 0x61, 0x79, 0x18, 0x13, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x62, 0x69, 0x72, 0x74, 0x68, 0x64, 0x61, 0x79, 0x12, 0x1e, 0x0a, 0x0a, 0x62,
	0x69, 0x72, 0x74, 0x68, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x62, 0x69, 0x72, 0x74, 0x68, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x74,
	0x69, 0x6d, 0x65, 0x42, 0x69, 0x72, 0x74, 0x68, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x74, 0x69, 0x6d, 0x65, 0x42, 0x69, 0x72, 0x74, 0x68, 0x12, 0x16, 0x0a, 0x06, 0x77, 0x65, 0x69,
	0x67, 0x68, 0x74, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x77, 0x65, 0x69, 0x67, 0x68,
	0x74, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x61, 0x6c, 0x6c, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x74, 0x61, 0x6c, 0x6c, 0x12, 0x1e, 0x0a, 0x0a, 0x68, 0x6f, 0x70, 0x65, 0x53, 0x61, 0x6c,
	0x61, 0x72, 0x79, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x68, 0x6f, 0x70, 0x65, 0x53,
	0x61, 0x6c, 0x61, 0x72, 0x79, 0x12, 0x1e, 0x0a, 0x0a, 0x68, 0x6f, 0x6d, 0x65, 0x42, 0x69, 0x72,
	0x74, 0x68, 0x31, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x68, 0x6f, 0x6d, 0x65, 0x42,
	0x69, 0x72, 0x74, 0x68, 0x31, 0x12, 0x1c, 0x0a, 0x09, 0x68, 0x6f, 0x6d, 0x65, 0x42, 0x69, 0x72,
	0x74, 0x68, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x68, 0x6f, 0x6d, 0x65, 0x42, 0x69,
	0x72, 0x74, 0x68, 0x12, 0x20, 0x0a, 0x0b, 0x74, 0x61, 0x6d, 0x62, 0x6f, 0x6c, 0x42, 0x69, 0x72,
	0x74, 0x68, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x74, 0x61, 0x6d, 0x62, 0x6f, 0x6c,
	0x42, 0x69, 0x72, 0x74, 0x68, 0x12, 0x20, 0x0a, 0x0b, 0x61, 0x6d, 0x70, 0x68, 0x75, 0x72, 0x42,
	0x69, 0x72, 0x74, 0x68, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x6d, 0x70, 0x68,
	0x75, 0x72, 0x42, 0x69, 0x72, 0x74, 0x68, 0x12, 0x24, 0x0a, 0x0d, 0x70, 0x72, 0x6f, 0x76, 0x69,
	0x6e, 0x63, 0x65, 0x42, 0x69, 0x72, 0x74, 0x68, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x70, 0x72, 0x6f, 0x76, 0x69, 0x6e, 0x63, 0x65, 0x42, 0x69, 0x72, 0x74, 0x68, 0x12, 0x18, 0x0a,
	0x07, 0x68, 0x6f, 0x6d, 0x65, 0x54, 0x65, 0x6c, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x68, 0x6f, 0x6d, 0x65, 0x54, 0x65, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x68, 0x6f, 0x6d, 0x65, 0x43,
	0x75, 0x72, 0x31, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x68, 0x6f, 0x6d, 0x65, 0x43,
	0x75, 0x72, 0x31, 0x12, 0x18, 0x0a, 0x07, 0x68, 0x6f, 0x6d, 0x65, 0x43, 0x75, 0x72, 0x18, 0x20,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x68, 0x6f, 0x6d, 0x65, 0x43, 0x75, 0x72, 0x12, 0x1c, 0x0a,
	0x09, 0x74, 0x61, 0x6d, 0x62, 0x6f, 0x6c, 0x43, 0x75, 0x72, 0x18, 0x21, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x74, 0x61, 0x6d, 0x62, 0x6f, 0x6c, 0x43, 0x75, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x61,
	0x6d, 0x70, 0x68, 0x75, 0x72, 0x43, 0x75, 0x72, 0x18, 0x22, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x61, 0x6d, 0x70, 0x68, 0x75, 0x72, 0x43, 0x75, 0x72, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x72, 0x6f,
	0x76, 0x69, 0x6e, 0x63, 0x65, 0x43, 0x75, 0x72, 0x18, 0x23, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x70, 0x72, 0x6f, 0x76, 0x69, 0x6e, 0x63, 0x65, 0x43, 0x75, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x6d,
	0x6f, 0x62, 0x69, 0x6c, 0x65, 0x18, 0x24, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6d, 0x6f, 0x62,
	0x69, 0x6c, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x25, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x6d, 0x18,
	0x26, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x6d, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72, 0x6f,
	0x78, 0x79, 0x18, 0x27, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x62, 0x6c, 0x6f, 0x6f, 0x64, 0x18, 0x28, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x62, 0x6c, 0x6f, 0x6f, 0x64, 0x12, 0x28, 0x0a, 0x0f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x69,
	0x65, 0x77, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x29, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x69, 0x65, 0x77, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x1c, 0x0a, 0x09, 0x67, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x49, 0x64, 0x18, 0x2a, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x09, 0x67, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x49, 0x64, 0x12, 0x26, 0x0a,
	0x0e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x2b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x18,
	0x2c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x12, 0x16, 0x0a,
	0x06, 0x64, 0x65, 0x70, 0x74, 0x49, 0x64, 0x18, 0x2d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64,
	0x65, 0x70, 0x74, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x65, 0x63, 0x74, 0x49, 0x64, 0x18,
	0x2e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x1a, 0x0a,
	0x08, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x49, 0x64, 0x18, 0x2f, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x6d,
	0x49, 0x64, 0x18, 0x30, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x63, 0x6f, 0x6d, 0x49, 0x64, 0x12,
	0x14, 0x0a, 0x05, 0x64, 0x65, 0x70, 0x49, 0x64, 0x18, 0x31, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x64, 0x65, 0x70, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x64, 0x18, 0x32, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x69, 0x64, 0x65, 0x49, 0x64, 0x18, 0x33, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x69, 0x64, 0x65, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x64,
	0x69, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x34, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x64, 0x69, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x57, 0x6f, 0x72, 0x6b, 0x18, 0x35, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x57, 0x6f, 0x72, 0x6b, 0x12, 0x18, 0x0a, 0x07, 0x70,
	0x72, 0x6f, 0x50, 0x61, 0x73, 0x73, 0x18, 0x36, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x72,
	0x6f, 0x50, 0x61, 0x73, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x61, 0x74, 0x53, 0x74, 0x6f, 0x70,
	0x18, 0x37, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x73, 0x61, 0x74, 0x53, 0x74, 0x6f, 0x70, 0x12,
	0x18, 0x0a, 0x07, 0x64, 0x61, 0x79, 0x53, 0x74, 0x6f, 0x70, 0x18, 0x38, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x07, 0x64, 0x61, 0x79, 0x53, 0x74, 0x6f, 0x70, 0x12, 0x20, 0x0a, 0x0b, 0x65, 0x6d, 0x70,
	0x50, 0x61, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x39, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x65, 0x6d, 0x70, 0x50, 0x61, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x24, 0x0a, 0x0d, 0x65,
	0x6d, 0x70, 0x68, 0x61, 0x73, 0x69, 0x7a, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x3a, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0d, 0x65, 0x6d, 0x70, 0x68, 0x61, 0x73, 0x69, 0x7a, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x69, 0x6d, 0x65, 0x53, 0x63, 0x61, 0x6e, 0x18, 0x3b, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x08, 0x74, 0x69, 0x6d, 0x65, 0x53, 0x63, 0x61, 0x6e, 0x12, 0x1e, 0x0a,
	0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x49, 0x64, 0x18, 0x3c, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x49, 0x64, 0x12, 0x1a, 0x0a,
	0x08, 0x73, 0x61, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x3d, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x08, 0x73, 0x61, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x6f, 0x76,
	0x65, 0x44, 0x61, 0x74, 0x65, 0x18, 0x3e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x6f, 0x76,
	0x65, 0x44, 0x61, 0x74, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x62, 0x6f, 0x73, 0x73, 0x49, 0x64, 0x18,
	0x3f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x62, 0x6f, 0x73, 0x73, 0x49, 0x64, 0x12, 0x18, 0x0a,
	0x07, 0x65, 0x6d, 0x70, 0x54, 0x79, 0x70, 0x65, 0x18, 0x40, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07,
	0x65, 0x6d, 0x70, 0x54, 0x79, 0x70, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x66, 0x50,
	0x61, 0x79, 0x54, 0x79, 0x70, 0x65, 0x18, 0x41, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f,
	0x6e, 0x66, 0x50, 0x61, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x79, 0x70,
	0x65, 0x53, 0x68, 0x69, 0x66, 0x74, 0x18, 0x42, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x79,
	0x70, 0x65, 0x53, 0x68, 0x69, 0x66, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x6f, 0x73, 0x74, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x43, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x6f, 0x73,
	0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x2c, 0x0a, 0x11, 0x72, 0x63, 0x41, 0x70, 0x70,
	0x6c, 0x79, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x4e, 0x6f, 0x18, 0x44, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x11, 0x72, 0x63, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x44, 0x6f, 0x63, 0x75, 0x6d,
	0x65, 0x6e, 0x74, 0x4e, 0x6f, 0x12, 0x24, 0x0a, 0x0d, 0x72, 0x63, 0x41, 0x70, 0x70, 0x6c, 0x69,
	0x63, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x45, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x72, 0x63,
	0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x11, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65,
	0x18, 0x46, 0x20, 0x01, 0x28, 0x05, 0x52, 0x11, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x65,
	0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6f, 0x6e,
	0x74, 0x61, 0x63, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x47, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b,
	0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x69,
	0x6d, 0x61, 0x67, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x48, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x32,
	0x3c, 0x0a, 0x0b, 0x55, 0x73, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x2d,
	0x0a, 0x0a, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x12, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x0b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x42, 0x09, 0x5a,
	0x07, 0x2e, 0x3b, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_user_proto_rawDescOnce sync.Once
	file_user_proto_rawDescData = file_user_proto_rawDesc
)

func file_user_proto_rawDescGZIP() []byte {
	file_user_proto_rawDescOnce.Do(func() {
		file_user_proto_rawDescData = protoimpl.X.CompressGZIP(file_user_proto_rawDescData)
	})
	return file_user_proto_rawDescData
}

var file_user_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_user_proto_goTypes = []interface{}{
	(*UserRequest)(nil), // 0: proto.UserRequest
	(*User)(nil),        // 1: proto.User
}
var file_user_proto_depIdxs = []int32{
	0, // 0: proto.UserService.GetProfile:input_type -> proto.UserRequest
	1, // 1: proto.UserService.GetProfile:output_type -> proto.User
	1, // [1:2] is the sub-list for method output_type
	0, // [0:1] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_user_proto_init() }
func file_user_proto_init() {
	if File_user_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_user_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*User); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_user_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_user_proto_goTypes,
		DependencyIndexes: file_user_proto_depIdxs,
		MessageInfos:      file_user_proto_msgTypes,
	}.Build()
	File_user_proto = out.File
	file_user_proto_rawDesc = nil
	file_user_proto_goTypes = nil
	file_user_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// UserServiceClient is the client API for UserService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type UserServiceClient interface {
	// GetProfile has a method, which is get profile user
	GetProfile(ctx context.Context, in *UserRequest, opts ...grpc.CallOption) (*User, error)
}

type userServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewUserServiceClient(cc grpc.ClientConnInterface) UserServiceClient {
	return &userServiceClient{cc}
}

func (c *userServiceClient) GetProfile(ctx context.Context, in *UserRequest, opts ...grpc.CallOption) (*User, error) {
	out := new(User)
	err := c.cc.Invoke(ctx, "/proto.UserService/GetProfile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserServiceServer is the server API for UserService service.
type UserServiceServer interface {
	// GetProfile has a method, which is get profile user
	GetProfile(context.Context, *UserRequest) (*User, error)
}

// UnimplementedUserServiceServer can be embedded to have forward compatible implementations.
type UnimplementedUserServiceServer struct {
}

func (*UnimplementedUserServiceServer) GetProfile(context.Context, *UserRequest) (*User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProfile not implemented")
}

func RegisterUserServiceServer(s *grpc.Server, srv UserServiceServer) {
	s.RegisterService(&_UserService_serviceDesc, srv)
}

func _UserService_GetProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).GetProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.UserService/GetProfile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).GetProfile(ctx, req.(*UserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _UserService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.UserService",
	HandlerType: (*UserServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetProfile",
			Handler:    _UserService_GetProfile_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "user.proto",
}
